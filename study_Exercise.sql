  SELECT * FROM REGION;
   SELECT * FROM SALES;
    SELECT * FROM PRODUCT;
    
-- POPOLAZIONE DELLA TABELLA REGION
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('SVEZIA', 'NORTH-EST', 1);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('NORVEGIA', 'NORTH-EST', 1);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('RUSSIA', 'NORTH-EST', 1);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('CINA', 'NORTH-EST', 1);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('TAIWAN', 'NORTH-EST', 1);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('INDONESIA', 'SUD-EST',2);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('FILIPPINE', 'SUD-EST', 2);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('LAOS', 'SUD-EST', 2);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('PERU', 'SUD-OVEST', 3);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('AUSTRALIA', 'SUD-OVEST', 3);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('ARGENTINA', 'SUD-OVEST', 3);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('STATI UNITI', 'NORD-OVEST', 4);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('CANADA', 'NORD-OVEST', 4);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('ALASKA', 'NORD-OVEST', 4);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('ITALIA', 'CENTRO', 5);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('GERMANIA', 'CENTRO', 5);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('PORTOGALLO', 'CENTRO', 5);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('SVIZZERA', 'CENTRO', 5);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('MAROCCO', 'CENTRO', 5);
INSERT INTO REGION (COUNTRY, DESCRIPTION, NUM_REGION) VALUES ('GRECIA', 'CENTRO', 5);


-- POPOLAZIONE DELLA TABELLA PRODUCT
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('RACE CAR', 1, 19, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('REMOTE CONTROL TRUCK', 1, 43, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('MOTORCYCLE TOY', 1, 15, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('POLICE CAR', 1, 23, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('FIRE TRUCK', 1, 30, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('AIRPLANE TOY', 1, 20, 'VEHICLES');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('SPIDER-MAN ACTION FIGURE', 0, 20, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BATMAN ACTION FIGURE', 0, 23, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('IRON MAN ACTION FIGURE', 0, 25, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('CAPTAIN AMERICA FIGURE', 0, 22, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('WONDER WOMAN ACTION FIGURE', 0, 20, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('HULK ACTION FIGURE', 1, 28, 'ACTION FIGURE');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BARBIE', 1, 26, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('KEN', 0, 20, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BAMBOLE BABY', 0, 16, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BABY ALIVE', 1, 36, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BARBIE DREAMHOUSE', 1, 13, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('LITTLE MOMMY', 1, 23, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('MY FIRST DOLL', 0, 15, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('POLLY POCKET', 0, 10, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('DOLLHOUSE FURNITURE', 1, 55, 'DOLL');
INSERT INTO PRODUCT (PRODUCT_NAME, KG, PRICE, CATEGORY_PRODUCT) VALUES ('BRATZ DOLL', 0, 20, 'DOLL');


-- POPOLAZIONE DELLA TABELLA SALES
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('John Smith', 10, 49, 'ITALIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Alice Johnson', 5, 50, 'GERMANIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Robert Brown', 8, 51, 'AUSTRALIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Jessica Taylor', 6, 52, 'STATI UNITI');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Michael Davis', 7, 53, 'CANADA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Emily Wilson', 12, 54, 'CINA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('David Clark', 3, 55, 'ARGENTINA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Sarah Lewis', 9, 56, 'SVIZZERA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('William Harris', 11, 57, 'RUSSIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Sophia Allen', 4, 58, 'FILIPPINE');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Daniel Martin', 6, 59, 'TAIWAN');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Olivia Rodriguez', 5, 60, 'PORTOGALLO');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('James Walker', 7, 61, 'NORVEGIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Charlotte Young', 14, 62, 'SVEZIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Amelia Taylor', 10, 64, 'GRECIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Ethan Hall', 3, 65, 'ALASKA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Mason King', 4, 66, 'LAOS');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Harper Scott', 12, 67, 'PERU');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Liam Adams', 9, 68, 'STATI UNITI');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Ava Nelson', 6, 69, 'TAIWAN');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Mia Carter', 8, 70, 'FILIPPINE');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Noah Perez', 5, 49, 'AUSTRALIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Eleanor Gonzalez', 11, 50, 'GRECIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Jack Mitchell', 7, 51, 'CANADA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Isabella Ramirez', 15, 52, 'ITALIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Zoe Parker', 6, 53, 'PORTOGALLO');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Henry Adams', 4, 54, 'GERMANIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Grace Nelson', 9, 55, 'CINA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Benjamin White', 10, 56, 'MAROCCO');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Chloe Evans', 5, 57, 'RUSSIA');
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY) VALUES ('Jacob Wright', 8, 58, 'SVEZIA');


-- Task 4 
-- 1) Verificare che i campi definiti come PK siano univoci. In altre parole, scrivi una query per determinare l’univocità dei valori di ciascuna PK (una query per tabella implementata).
	 -- Risposte: nella creazione delle tabelle avevo già indicato un auto_increment, di conseguenza, la PK non potra mai essere univoca. Nella tabella Sales ho indicato che la PK sia un valore 'UNIQUE'
     -- Se volessi verificare comunque, raggrupperei per primary key in modo che se il conto è > di 1 allora avremo una PK duplicata
     -- Esempio
     
     SELECT IDPRODUCT, COUNT(*)
FROM PRODUCT
GROUP BY IDPRODUCT
HAVING COUNT(*) > 1;

-- 2)	Esporre l’elenco delle transazioni indicando nel result set il codice documento, la data, il nome del prodotto, la categoria del prodotto, il nome dello stato, il nome della regione di vendita e un campo booleano valorizzato in base alla condizione che siano passati più di 180 giorni dalla data vendita o meno (>180 -> True, <= 180 -> False)

-- CREO E POPOLO LA TABELLA SALES CON DATE AGGIUNGO UNA RIGA IN CUI LA DATA è < DI 180 GIORNI AI FINI DELL'ESERCIZIO
ALTER TABLE SALES ADD COLUMN DATE date;
UPDATE SALES SET DATE='2025-02-22' WHERE IDPRODUCT='49';
UPDATE SALES SET DATE='2025-01-28' WHERE IDPRODUCT='50';
UPDATE SALES SET DATE='2024-12-10' WHERE IDPRODUCT='51';
UPDATE SALES SET DATE='2024-11-16' WHERE IDPRODUCT='52';
UPDATE SALES SET DATE='2024-10-22' WHERE IDPRODUCT='53';
UPDATE SALES SET DATE='2024-09-18' WHERE IDPRODUCT='54';
UPDATE SALES SET DATE='2024-08-07' WHERE IDPRODUCT='55';
UPDATE SALES SET DATE='2024-07-03' WHERE IDPRODUCT='56';
UPDATE SALES SET DATE='2024-06-21' WHERE IDPRODUCT='57';
UPDATE SALES SET DATE='2024-05-15' WHERE IDPRODUCT='58';
UPDATE SALES SET DATE='2024-04-10' WHERE IDPRODUCT='59';
UPDATE SALES SET DATE='2024-03-20' WHERE IDPRODUCT='60';
UPDATE SALES SET DATE='2024-02-29' WHERE IDPRODUCT='61';
UPDATE SALES SET DATE='2024-01-12' WHERE IDPRODUCT='62';
UPDATE SALES SET DATE='2023-12-01' WHERE IDPRODUCT='64';
UPDATE SALES SET DATE='2023-11-07' WHERE IDPRODUCT='65';
UPDATE SALES SET DATE='2023-10-10' WHERE IDPRODUCT='66';
UPDATE SALES SET DATE='2023-09-05' WHERE IDPRODUCT='67';
UPDATE SALES SET DATE='2023-08-16' WHERE IDPRODUCT='68';
UPDATE SALES SET DATE='2023-07-25' WHERE IDPRODUCT='69';
UPDATE SALES SET DATE='2023-06-14' WHERE IDPRODUCT='70';
UPDATE SALES SET DATE='2023-05-09' WHERE IDPRODUCT='49';
UPDATE SALES SET DATE='2023-04-26' WHERE IDPRODUCT='50';
UPDATE SALES SET DATE='2023-03-15' WHERE IDPRODUCT='51';
UPDATE SALES SET DATE='2023-02-01' WHERE IDPRODUCT='52';
UPDATE SALES SET DATE='2023-01-18' WHERE IDPRODUCT='53';
UPDATE SALES SET DATE='2022-12-06' WHERE IDPRODUCT='54';
UPDATE SALES SET DATE='2022-11-02' WHERE IDPRODUCT='55';
UPDATE SALES SET DATE='2022-10-11' WHERE IDPRODUCT='56';
UPDATE SALES SET DATE='2022-09-21' WHERE IDPRODUCT='57';
UPDATE SALES SET DATE='2022-08-30' WHERE IDPRODUCT='58';
INSERT INTO SALES (SELLER_NAME, QUANTITY, IDPRODUCT, COUNTRY, DATE) VALUES ('Jacob VERDI', 8, 58, 'ITALIA', '2024-12-20');

SELECT S.IDSALES, S.DATE, P.PRODUCT_NAME, P.CATEGORY_PRODUCT, S.COUNTRY, R.DESCRIPTION,
CASE WHEN DATEDIFF(CURDATE(), S.DATE) > 180 THEN TRUE
ELSE FALSE
END AS '>180DAYS'
FROM SALES AS S
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
LEFT JOIN REGION AS R
ON S.COUNTRY = R.COUNTRY;

-- 3)	Esporre l’elenco dei prodotti che hanno venduto, in totale, una quantità maggiore della media delle vendite realizzate nell’ultimo anno censito. (ogni valore della condizione deve risultare da una query e non deve essere inserito a mano). Nel result set devono comparire solo il codice prodotto e il totale venduto.

SELECT IDPRODUCT, SUM(QUANTITY) AS QUANTITY_SELLED
FROM SALES 
WHERE DATEDIFF(CURDATE(), DATE) < 365
GROUP BY IDPRODUCT
HAVING SUM(QUANTITY) > (SELECT AVG(QUANTITY) FROM SALES WHERE DATEDIFF(CURDATE(), DATE) < 365);

-- 4)	Esporre l’elenco dei soli prodotti venduti e per ognuno di questi il fatturato totale per anno.

SELECT YEAR(S.DATE) AS SALES_YEAR, S.IDPRODUCT, P.PRODUCT_NAME, SUM(S.QUANTITY) * P.PRICE AS TOT_SALES
FROM SALES AS S
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
GROUP BY SALES_YEAR, S.IDPRODUCT, P.PRODUCT_NAME, P.PRICE;

-- 5)	Esporre il fatturato totale per stato per anno. Ordina il risultato per data e per fatturato decrescente.

SELECT YEAR(S.DATE) AS SALES_YEAR, S.COUNTRY, SUM(QUANTITY) * P.PRICE AS TOT_SALES
FROM SALES AS S
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
GROUP BY SALES_YEAR, S.COUNTRY, P.PRICE
ORDER BY SALES_YEAR DESC, TOT_SALES DESC;

-- 6)	Rispondere alla seguente domanda: qual è la categoria di articoli maggiormente richiesta dal mercato?
	-- LA CATEGORIA MAGGIOMENTE VENDUTA, E' QUELLA DEI "VEHICLES"

SELECT P.CATEGORY_PRODUCT , SUM(S.QUANTITY) AS SALES_QUANTITY
FROM SALES AS S
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT=P.IDPRODUCT
GROUP BY P.CATEGORY_PRODUCT
ORDER BY P.CATEGORY_PRODUCT DESC;

-- 7)	Rispondere alla seguente domanda: quali sono i prodotti invenduti? Proponi due approcci risolutivi differenti.
	-- FACCIO UNA FULL JOIN TRA SALES E PRODUCT, E MI FILTRO I PRODOTTI CHE NON HANNO QUANTITA VENDUTE, MA IN QUESTO CASO NON CI SONO PRODOTTI INVENDUTI
SELECT S.IDPRODUCT, S.QUANTITY, P.IDPRODUCT
FROM SALES AS S
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
WHERE S.QUANTITY IS NULL
UNION
SELECT S.IDPRODUCT, S.QUANTITY, P.IDPRODUCT
FROM SALES AS S
RIGHT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
WHERE S.QUANTITY IS NULL;

	-- FACCIO UNA RIGHT JOIN TRA SALES E PRODUCT, IN MODO DA ESCLUDERE E VEDERE SOLTANTO QUALI PRODOTTI NON COMPAIONO NELLA TABELLA SALES
SELECT P.IDPRODUCT, SUM(S.QUANTITY)
FROM SALES AS S
RIGHT JOIN PRODUCT AS P
ON S.IDPRODUCT = P.IDPRODUCT
GROUP BY P.IDPRODUCT
HAVING SUM(S.QUANTITY) IS NULL;

-- 8)	Creare una vista sui prodotti in modo tale da esporre una “versione denormalizzata” delle informazioni utili (codice prodotto, nome prodotto, nome categoria)

CREATE VIEW PRODUCT_VIEW AS(
SELECT IDPRODUCT, PRODUCT_NAME, CATEGORY_PRODUCT
FROM PRODUCT);

SELECT * FROM PRODUCT_VIEW;

-- 9)	Creare una vista per le informazioni geografiche
	-- CREO UN VISTA CHE PERMETTE DI VISUALIZZARE PER AREA GIOGRAFICA, IL FATTURATO GENERATO
    
CREATE VIEW GEOG_SALES AS(
SELECT R.DESCRIPTION, SUM(S.QUANTITY) * AVG(P.PRICE) AS TOT_SALES
FROM SALES AS S
LEFT JOIN REGION AS R
ON R.COUNTRY=S.COUNTRY
LEFT JOIN PRODUCT AS P
ON S.IDPRODUCT=P.IDPRODUCT
GROUP BY R.DESCRIPTION);

SELECT * FROM GEOG_SALES;